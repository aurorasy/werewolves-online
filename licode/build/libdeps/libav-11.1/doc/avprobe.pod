=encoding utf8
=head1 NAME

avprobe - avprobe media prober

=encoding utf8
=head1 SYNOPSIS

avprobe [options] [F<input_file>]

=encoding utf8
=head1 DESCRIPTION


avprobe gathers information from multimedia streams and prints it in
human- and machine-readable fashion.

For example it can be used to check the format of the container used
by a multimedia stream and the format and type of each media stream
contained in it.

If a filename is specified in input, avprobe will try to open and
probe the file content. If the file cannot be opened or recognized as
a multimedia file, a positive exit code is returned.

avprobe may be employed both as a standalone application or in
combination with a textual filter, which may perform more
sophisticated processing, e.g. statistical processing or plotting.

Options are used to list some of the formats supported by avprobe or
for specifying which information to display, and for setting how
avprobe will show it.

avprobe output is designed to be easily parsable by any INI or JSON
parsers.


=encoding utf8
=head1 OPTIONS


All the numerical options, if not specified otherwise, accept in input
a string representing a number, which may contain one of the
SI unit prefixes, for example 'K', 'M', 'G'.
If 'i' is appended after the prefix, binary prefixes are used,
which are based on powers of 1024 instead of powers of 1000.
The 'B' postfix multiplies the value by 8, and can be
appended after a unit prefix or used alone. This allows using for
example 'KB', 'MiB', 'G' and 'B' as number postfix.

Options which do not take arguments are boolean options, and set the
corresponding value to true. They can be set to false by prefixing
with "no" the option name, for example using "-nofoo" in the
command line will set to false the boolean option with name "foo".



=head2 Stream specifiers

Some options are applied per-stream, e.g. bitrate or codec. Stream specifiers
are used to precisely specify which stream(s) does a given option belong to.

A stream specifier is a string generally appended to the option name and
separated from it by a colon. E.g. C<-codec:a:1 ac3> option contains
C<a:1> stream specifer, which matches the second audio stream. Therefore it
would select the ac3 codec for the second audio stream.

A stream specifier can match several stream, the option is then applied to all
of them. E.g. the stream specifier in C<-b:a 128k> matches all audio
streams.

An empty stream specifier matches all streams, for example C<-codec copy>
or C<-codec: copy> would copy all the streams without reencoding.

Possible forms of stream specifiers are:

=over 4


=item I<stream_index>

Matches the stream with this index. E.g. C<-threads:1 4> would set the
thread count for the second stream to 4.

=item I<stream_type>B<[:>I<stream_index>B<]>

I<stream_type> is one of: 'v' for video, 'a' for audio, 's' for subtitle,
'd' for data and 't' for attachments. If I<stream_index> is given, then
matches stream number I<stream_index> of this type. Otherwise matches all
streams of this type.

=item B<p:>I<program_id>B<[:>I<stream_index>B<]>

If I<stream_index> is given, then matches stream number I<stream_index> in
program with id I<program_id>. Otherwise matches all streams in this program.

=item B<i:>I<stream_id>

Match the stream by stream id (e.g. PID in MPEG-TS container).

=item B<m:>I<key>B<[:>I<value>B<]>

Matches streams with the metadata tag I<key> having the specified value. If
I<value> is not given, matches streams that contain the given tag with any
value.

Note that in B<avconv>, matching by metadata will only work properly for
input files.

=back


=head2 Generic options


These options are shared amongst the av* tools.


=over 4



=item B<-L>

Show license.


=item B<-h, -?, -help, --help [>I<arg>B<]>

Show help. An optional parameter may be specified to print help about a specific
item.

Possible values of I<arg> are:

=over 4


=item B<decoder=>I<decoder_name>

Print detailed information about the decoder named I<decoder_name>. Use the
B<-decoders> option to get a list of all decoders.


=item B<encoder=>I<encoder_name>

Print detailed information about the encoder named I<encoder_name>. Use the
B<-encoders> option to get a list of all encoders.


=item B<demuxer=>I<demuxer_name>

Print detailed information about the demuxer named I<demuxer_name>. Use the
B<-formats> option to get a list of all demuxers and muxers.


=item B<muxer=>I<muxer_name>

Print detailed information about the muxer named I<muxer_name>. Use the
B<-formats> option to get a list of all muxers and demuxers.


=item B<filter=>I<filter_name>

Print detailed information about the filter name I<filter_name>. Use the
B<-filters> option to get a list of all filters.


=back



=item B<-version>

Show version.


=item B<-formats>

Show available formats.

The fields preceding the format names have the following meanings:

=over 4


=item B<D>

Decoding available

=item B<E>

Encoding available

=back



=item B<-codecs>

Show all codecs known to libavcodec.

Note that the term 'codec' is used throughout this documentation as a shortcut
for what is more correctly called a media bitstream format.


=item B<-decoders>

Show available decoders.


=item B<-encoders>

Show all available encoders.


=item B<-bsfs>

Show available bitstream filters.


=item B<-protocols>

Show available protocols.


=item B<-filters>

Show available libavfilter filters.


=item B<-pix_fmts>

Show available pixel formats.


=item B<-sample_fmts>

Show available sample formats.


=item B<-loglevel> I<loglevel> B<| -v> I<loglevel>

Set the logging level used by the library.
I<loglevel> is a number or a string containing one of the following values:

=over 4


=item B<quiet>


=item B<panic>


=item B<fatal>


=item B<error>


=item B<warning>


=item B<info>


=item B<verbose>


=item B<debug>


=back


By default the program logs to stderr, if coloring is supported by the
terminal, colors are used to mark errors and warnings. Log coloring
can be disabled setting the environment variable
B<AV_LOG_FORCE_NOCOLOR> or B<NO_COLOR>, or can be forced setting
the environment variable B<AV_LOG_FORCE_COLOR>.
The use of the environment variable B<NO_COLOR> is deprecated and
will be dropped in a following Libav version.


=item B<-cpuflags mask (>I<global>B<)>

Set a mask that's applied to autodetected CPU flags. This option is intended
for testing. Do not use it unless you know what you're doing.


=back



=head2 AVOptions


These options are provided directly by the libavformat, libavdevice and
libavcodec libraries. To see the list of available AVOptions, use the
B<-help> option. They are separated into two categories:

=over 4


=item B<generic>

These options can be set for any container, codec or device. Generic options
are listed under AVFormatContext options for containers/devices and under
AVCodecContext options for codecs.

=item B<private>

These options are specific to the given container, device or codec. Private
options are listed under their corresponding containers/devices/codecs.

=back


For example to write an ID3v2.3 header instead of a default ID3v2.4 to
an MP3 file, use the B<id3v2_version> private option of the MP3
muxer:
	
	avconv -i input.flac -id3v2_version 3 out.mp3


All codec AVOptions are obviously per-stream, so the chapter on stream
specifiers applies to them

Note B<-nooption> syntax cannot be used for boolean AVOptions,
use B<-option 0>/B<-option 1>.

Note2 old undocumented way of specifying per-stream AVOptions by prepending
v/a/s to the options name is now obsolete and will be removed soon.


=head2 Codec AVOptions


=over 4


=item B<-b[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

set bitrate (in bits/s)

=item B<-bt[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to minimum/maximum bitrate. Lowering tolerance too much has an adverse effect on quality.

=item B<-flags[:stream_specifier]> I<flags> B<(>I<input/output,audio,video>B<)>


Possible values:

=over 4


=item B<unaligned>

allow decoders to produce unaligned output

=item B<mv4>

use four motion vectors per macroblock (MPEG-4)

=item B<qpel>

use 1/4-pel motion compensation

=item B<loop>

use loop filter

=item B<qscale>

use fixed qscale

=item B<gmc>

use gmc

=item B<mv0>

always try a mb with mv=E<lt>0,0E<gt>

=item B<input_preserved>



=item B<pass1>

use internal 2-pass ratecontrol in first  pass mode

=item B<pass2>

use internal 2-pass ratecontrol in second pass mode

=item B<gray>

only decode/encode grayscale

=item B<emu_edge>

do not draw edges

=item B<psnr>

error[?] variables will be set during encoding

=item B<truncated>



=item B<naq>

normalize adaptive quantization

=item B<ildct>

use interlaced DCT

=item B<low_delay>

force low delay

=item B<global_header>

place global headers in extradata instead of every keyframe

=item B<bitexact>

use only bitexact functions (except (I)DCT)

=item B<aic>

H.263 advanced intra coding / MPEG-4 AC prediction

=item B<ilme>

interlaced motion estimation

=item B<cgop>

closed GOP

=item B<output_corrupt>

Output even potentially corrupted frames

=back


=item B<-me_method[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

set motion estimation method

Possible values:

=over 4


=item B<zero>

zero motion estimation (fastest)

=item B<full>

full motion estimation (slowest)

=item B<epzs>

EPZS motion estimation (default)

=item B<esa>

esa motion estimation (alias for full)

=item B<tesa>

tesa motion estimation

=item B<dia>

diamond motion estimation (alias for EPZS)

=item B<log>

log motion estimation

=item B<phods>

phods motion estimation

=item B<x1>

X1 motion estimation

=item B<hex>

hex motion estimation

=item B<umh>

umh motion estimation

=back


=item B<-g[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

set the group of picture (GOP) size

=item B<-ar[:stream_specifier]> I<integer> B<(>I<input/output,audio>B<)>

set audio sampling rate (in Hz)

=item B<-ac[:stream_specifier]> I<integer> B<(>I<input/output,audio>B<)>

set number of audio channels

=item B<-cutoff[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>

set cutoff bandwidth

=item B<-frame_size[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>


=item B<-qcomp[:stream_specifier]> I<float> B<(>I<output,video>B<)>

video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0

=item B<-qblur[:stream_specifier]> I<float> B<(>I<output,video>B<)>

video quantizer scale blur (VBR)

=item B<-qmin[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

minimum video quantizer scale (VBR)

=item B<-qmax[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

maximum video quantizer scale (VBR)

=item B<-qdiff[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

maximum difference between the quantizer scales (VBR)

=item B<-bf[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

use 'frames' B frames

=item B<-b_qfactor[:stream_specifier]> I<float> B<(>I<output,video>B<)>

QP factor between P- and B-frames

=item B<-rc_strategy[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

ratecontrol method

=item B<-b_strategy[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

strategy to choose between I/P/B-frames

=item B<-ps[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

RTP payload size in bytes

=item B<-bug[:stream_specifier]> I<flags> B<(>I<input,video>B<)>

work around not autodetected encoder bugs

Possible values:

=over 4


=item B<autodetect>



=item B<old_msmpeg4>

some old lavc-generated MSMPEG4v3 files (no autodetection)

=item B<xvid_ilace>

Xvid interlacing bug (autodetected if FOURCC == XVIX)

=item B<ump4>

(autodetected if FOURCC == UMP4)

=item B<no_padding>

padding bug (autodetected)

=item B<amv>



=item B<ac_vlc>

illegal VLC bug (autodetected per FOURCC)

=item B<qpel_chroma>



=item B<std_qpel>

old standard qpel (autodetected per FOURCC/version)

=item B<qpel_chroma2>



=item B<direct_blocksize>

direct-qpel-blocksize bug (autodetected per FOURCC/version)

=item B<edge>

edge padding bug (autodetected per FOURCC/version)

=item B<hpel_chroma>



=item B<dc_clip>



=item B<ms>

work around various bugs in Microsoft's broken decoders

=item B<trunc>

truncated frames

=back


=item B<-strict[:stream_specifier]> I<integer> B<(>I<input/output,audio,video>B<)>

how strictly to follow the standards

Possible values:

=over 4


=item B<very>

strictly conform to a older more strict version of the spec or reference software

=item B<strict>

strictly conform to all the things in the spec no matter what the consequences

=item B<normal>



=item B<unofficial>

allow unofficial extensions

=item B<experimental>

allow non-standardized experimental things

=back


=item B<-b_qoffset[:stream_specifier]> I<float> B<(>I<output,video>B<)>

QP offset between P- and B-frames

=item B<-err_detect[:stream_specifier]> I<flags> B<(>I<input,audio,video>B<)>

set error detection flags

Possible values:

=over 4


=item B<crccheck>

verify embedded CRCs

=item B<bitstream>

detect bitstream specification deviations

=item B<buffer>

detect improper bitstream length

=item B<explode>

abort decoding on minor error detection

=back


=item B<-mpeg_quant[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

use MPEG quantizers instead of H.263

=item B<-qsquish[:stream_specifier]> I<float> B<(>I<output,video>B<)>

how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)

=item B<-rc_qmod_amp[:stream_specifier]> I<float> B<(>I<output,video>B<)>

experimental quantizer modulation

=item B<-rc_qmod_freq[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

experimental quantizer modulation

=item B<-rc_eq[:stream_specifier]> I<string> B<(>I<output,video>B<)>

Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.

=item B<-maxrate[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

Set maximum bitrate tolerance (in bits/s). Requires bufsize to be set.

=item B<-minrate[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

Set minimum bitrate tolerance (in bits/s). Most useful in setting up a CBR encode. It is of little use otherwise.

=item B<-bufsize[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

set ratecontrol buffer size (in bits)

=item B<-rc_buf_aggressivity[:stream_specifier]> I<float> B<(>I<output,video>B<)>

currently useless

=item B<-i_qfactor[:stream_specifier]> I<float> B<(>I<output,video>B<)>

QP factor between P- and I-frames

=item B<-i_qoffset[:stream_specifier]> I<float> B<(>I<output,video>B<)>

QP offset between P- and I-frames

=item B<-rc_init_cplx[:stream_specifier]> I<float> B<(>I<output,video>B<)>

initial complexity for 1-pass encoding

=item B<-dct[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

DCT algorithm

Possible values:

=over 4


=item B<auto>

autoselect a good one (default)

=item B<fastint>

fast integer

=item B<int>

accurate integer

=item B<mmx>



=item B<altivec>



=item B<faan>

floating point AAN DCT

=back


=item B<-lumi_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

compresses bright areas stronger than medium ones

=item B<-tcplx_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

temporal complexity masking

=item B<-scplx_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

spatial complexity masking

=item B<-p_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

inter masking

=item B<-dark_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

compresses dark areas stronger than medium ones

=item B<-idct[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>

select IDCT implementation

Possible values:

=over 4


=item B<auto>



=item B<int>



=item B<simple>



=item B<simplemmx>



=item B<arm>



=item B<altivec>



=item B<sh4>



=item B<simplearm>



=item B<simplearmv5te>



=item B<simplearmv6>



=item B<simpleneon>



=item B<simplealpha>



=item B<ipp>



=item B<xvid>



=item B<xvidmmx>



=item B<faani>

floating point AAN IDCT

=back


=item B<-ec[:stream_specifier]> I<flags> B<(>I<input,video>B<)>

set error concealment strategy

Possible values:

=over 4


=item B<guess_mvs>

iterative motion vector (MV) search (slow)

=item B<deblock>

use strong deblock filter for damaged MBs

=back


=item B<-pred[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

prediction method

Possible values:

=over 4


=item B<left>



=item B<plane>



=item B<median>



=back


=item B<-aspect[:stream_specifier]> I<rational number> B<(>I<output,video>B<)>

sample aspect ratio

=item B<-debug[:stream_specifier]> I<flags> B<(>I<input/output,audio,video,subtitles>B<)>

print specific debug info

Possible values:

=over 4


=item B<pict>

picture info

=item B<rc>

rate control

=item B<bitstream>



=item B<mb_type>

macroblock (MB) type

=item B<qp>

per-block quantization parameter (QP)

=item B<mv>

motion vector

=item B<dct_coeff>



=item B<skip>



=item B<startcode>



=item B<pts>



=item B<er>

error recognition

=item B<mmco>

memory management control operations (H.264)

=item B<bugs>



=item B<vis_qp>

visualize quantization parameter (QP), lower QP are tinted greener

=item B<vis_mb_type>

visualize block types

=item B<buffers>

picture buffer allocations

=item B<thread_ops>

threading operations

=back


=item B<-vismv[:stream_specifier]> I<integer> B<(>I<input,video>B<)>

visualize motion vectors (MVs)

Possible values:

=over 4


=item B<pf>

forward predicted MVs of P-frames

=item B<bf>

forward predicted MVs of B-frames

=item B<bb>

backward predicted MVs of B-frames

=back


=item B<-cmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

full-pel ME compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<dctmax>



=item B<chroma>



=back


=item B<-subcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

sub-pel ME compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<dctmax>



=item B<chroma>



=back


=item B<-mbcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

macroblock compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<dctmax>



=item B<chroma>



=back


=item B<-ildctcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

interlaced DCT compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<dctmax>



=item B<chroma>



=back


=item B<-dia_size[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

diamond type & size for motion estimation

=item B<-last_pred[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

amount of motion predictors from the previous frame

=item B<-preme[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

pre motion estimation

=item B<-precmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

pre motion estimation compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<dctmax>



=item B<chroma>



=back


=item B<-pre_dia_size[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

diamond type & size for motion estimation pre-pass

=item B<-subq[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

sub-pel motion estimation quality

=item B<-me_range[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

limit motion vectors range (1023 for DivX player)

=item B<-ibias[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

intra quant bias

=item B<-pbias[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

inter quant bias

=item B<-global_quality[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


=item B<-coder[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


Possible values:

=over 4


=item B<vlc>

variable length coder / Huffman coder

=item B<ac>

arithmetic coder

=item B<raw>

raw (no encoding)

=item B<rle>

run-length coder

=item B<deflate>

deflate-based coder

=back


=item B<-context[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

context model

=item B<-mbd[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

macroblock decision algorithm (high quality mode)

Possible values:

=over 4


=item B<simple>

use mbcmp (default)

=item B<bits>

use fewest bits

=item B<rd>

use best rate distortion

=back


=item B<-sc_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

scene change threshold

=item B<-lmin[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

minimum Lagrange factor (VBR)

=item B<-lmax[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

maximum Lagrange factor (VBR)

=item B<-nr[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

noise reduction

=item B<-rc_init_occupancy[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

number of bits which should be loaded into the rc buffer before decoding starts

=item B<-flags2[:stream_specifier]> I<flags> B<(>I<input/output,audio,video>B<)>


Possible values:

=over 4


=item B<fast>

allow non-spec-compliant speedup tricks

=item B<noout>

skip bitstream encoding

=item B<ignorecrop>

ignore cropping information from sps

=item B<local_header>

place global headers at every keyframe instead of in extradata

=back


=item B<-error[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


=item B<-threads[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


Possible values:

=over 4


=item B<auto>

autodetect a suitable number of threads to use

=back


=item B<-me_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

motion estimation threshold

=item B<-mb_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

macroblock threshold

=item B<-dc[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

intra_dc_precision

=item B<-nssew[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

nsse weight

=item B<-skip_top[:stream_specifier]> I<integer> B<(>I<input,video>B<)>

number of macroblock rows at the top which are skipped

=item B<-skip_bottom[:stream_specifier]> I<integer> B<(>I<input,video>B<)>

number of macroblock rows at the bottom which are skipped

=item B<-profile[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


Possible values:

=over 4


=item B<unknown>



=item B<aac_main>



=item B<aac_low>



=item B<aac_ssr>



=item B<aac_ltp>



=item B<aac_he>



=item B<aac_he_v2>



=item B<aac_ld>



=item B<aac_eld>



=item B<mpeg2_aac_low>



=item B<mpeg2_aac_he>



=item B<dts>



=item B<dts_es>



=item B<dts_96_24>



=item B<dts_hd_hra>



=item B<dts_hd_ma>



=back


=item B<-level[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


Possible values:

=over 4


=item B<unknown>



=back


=item B<-skip_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip threshold

=item B<-skip_factor[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip factor

=item B<-skip_exp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip exponent

=item B<-skipcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<dctmax>



=item B<chroma>



=back


=item B<-border_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

increase the quantizer for macroblocks close to borders

=item B<-mblmin[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

minimum macroblock Lagrange factor (VBR)

=item B<-mblmax[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

maximum macroblock Lagrange factor (VBR)

=item B<-mepc[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

motion estimation bitrate penalty compensation (1.0 = 256)

=item B<-skip_loop_filter[:stream_specifier]> I<integer> B<(>I<input,video>B<)>


Possible values:

=over 4


=item B<none>



=item B<default>



=item B<noref>



=item B<bidir>



=item B<nokey>



=item B<all>



=back


=item B<-skip_idct[:stream_specifier]> I<integer> B<(>I<input,video>B<)>


Possible values:

=over 4


=item B<none>



=item B<default>



=item B<noref>



=item B<bidir>



=item B<nokey>



=item B<all>



=back


=item B<-skip_frame[:stream_specifier]> I<integer> B<(>I<input,video>B<)>


Possible values:

=over 4


=item B<none>



=item B<default>



=item B<noref>



=item B<bidir>



=item B<nokey>



=item B<all>



=back


=item B<-bidir_refine[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

refine the two motion vectors used in bidirectional macroblocks

=item B<-brd_scale[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

downscale frames for dynamic B-frame decision

=item B<-keyint_min[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

minimum interval between IDR-frames (x264)

=item B<-refs[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

reference frames to consider for motion compensation

=item B<-chromaoffset[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

chroma QP offset from luma

=item B<-trellis[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

rate-distortion optimal quantization

=item B<-sc_factor[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

multiplied by qscale for each frame and added to scene_change_score

=item B<-mv0_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


=item B<-b_sensitivity[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

adjust sensitivity of b_frame_strategy 1

=item B<-compression_level[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


=item B<-min_prediction_order[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>


=item B<-max_prediction_order[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>


=item B<-timecode_frame_start[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

GOP timecode frame start number, in non-drop-frame format

=item B<-request_channels[:stream_specifier]> I<integer> B<(>I<input,audio>B<)>

set desired number of audio channels

=item B<-channel_layout[:stream_specifier]> I<integer> B<(>I<input/output,audio>B<)>


Possible values:

=over 4


=back


=item B<-request_channel_layout[:stream_specifier]> I<integer> B<(>I<input,audio>B<)>


Possible values:

=over 4


=back


=item B<-rc_max_vbv_use[:stream_specifier]> I<float> B<(>I<output,video>B<)>


=item B<-rc_min_vbv_use[:stream_specifier]> I<float> B<(>I<output,video>B<)>


=item B<-ticks_per_frame[:stream_specifier]> I<integer> B<(>I<input/output,audio,video>B<)>


=item B<-color_primaries[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>

color primaries

Possible values:

=over 4


=item B<bt709>

BT.709

=item B<unspecified>

Unspecified

=item B<bt470m>

BT.470 M

=item B<bt470bg>

BT.470 BG

=item B<smpte170m>

SMPTE 170 M

=item B<smpte240m>

SMPTE 240 M

=item B<film>

Film

=item B<bt2020>

BT.2020

=back


=item B<-color_trc[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>

color transfert characteristic

Possible values:

=over 4


=item B<bt709>

BT.709

=item B<unspecified>

Unspecified

=item B<gamma22>

Gamma 2.2

=item B<gamma28>

Gamma 2.8

=item B<smpte170m>

SMPTE 170 M

=item B<smpte240m>

SMPTE 240 M

=item B<linear>

Linear

=item B<log>

SMPTE 240 M

=item B<log_sqrt>

SMPTE 240 M

=item B<iec61966_2_4>

SMPTE 240 M

=item B<bt1361>

BT.1361

=item B<iec61966_2_1>

SMPTE 240 M

=item B<bt2020_10bit>

BT.2020 - 10 bit

=item B<bt2020_12bit>

BT.2020 - 12 bit

=back


=item B<-colorspace[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>

colorspace

Possible values:

=over 4


=item B<rgb>

RGB

=item B<bt709>

BT.709

=item B<unspecified>

Unspecified

=item B<fcc>

FourCC

=item B<bt470bg>

BT.470 BG

=item B<smpte170m>

SMPTE 170 M

=item B<smpte240m>

SMPTE 240 M

=item B<ycocg>

YCOCG

=item B<bt2020_ncl>

BT.2020 NCL

=item B<bt2020_cl>

BT.2020 CL

=back


=item B<-color_range[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>

color range

Possible values:

=over 4


=item B<unspecified>

Unspecified

=item B<mpeg>

MPEG (219*2^(n-8))

=item B<jpeg>

JPEG (2^n-1)

=back


=item B<-chroma_sample_location[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


=item B<-slices[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

number of slices, used in parallelized encoding

=item B<-thread_type[:stream_specifier]> I<flags> B<(>I<input/output,video>B<)>

select multithreading type

Possible values:

=over 4


=item B<slice>



=item B<frame>



=back


=item B<-audio_service_type[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>

audio service type

Possible values:

=over 4


=item B<ma>

Main Audio Service

=item B<ef>

Effects

=item B<vi>

Visually Impaired

=item B<hi>

Hearing Impaired

=item B<di>

Dialogue

=item B<co>

Commentary

=item B<em>

Emergency

=item B<vo>

Voice Over

=item B<ka>

Karaoke

=back


=item B<-request_sample_fmt[:stream_specifier]> I<integer> B<(>I<input,audio>B<)>


Possible values:

=over 4


=item B<u8>

8-bit unsigned integer

=item B<s16>

16-bit signed integer

=item B<s32>

32-bit signed integer

=item B<flt>

32-bit float

=item B<dbl>

64-bit double

=item B<u8p>

8-bit unsigned integer planar

=item B<s16p>

16-bit signed integer planar

=item B<s32p>

32-bit signed integer planar

=item B<fltp>

32-bit float planar

=item B<dblp>

64-bit double planar

=back


=item B<-refcounted_frames[:stream_specifier]> I<integer> B<(>I<input,audio,video>B<)>


=item B<-side_data_only_packets[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


=back


=head2 Format AVOptions


=over 4


=item B<-probesize> I<integer> B<(>I<input>B<)>

set probing size

=item B<-packetsize> I<integer> B<(>I<output>B<)>

set packet size

=item B<-fflags> I<flags> B<(>I<input/output>B<)>


Possible values:

=over 4


=item B<flush_packets>

reduce the latency by flushing out packets immediately

=item B<ignidx>

ignore index

=item B<genpts>

generate pts

=item B<nofillin>

do not fill in missing values that can be exactly calculated

=item B<noparse>

disable AVParsers, this needs nofillin too

=item B<igndts>

ignore dts

=item B<discardcorrupt>

discard corrupted frames

=item B<nobuffer>

reduce the latency introduced by optional buffering

=item B<bitexact>

do not write random/volatile data

=back


=item B<-analyzeduration> I<integer> B<(>I<input>B<)>

how many microseconds are analyzed to estimate duration

=item B<-cryptokey> I<hexadecimal string> B<(>I<input>B<)>

decryption key

=item B<-indexmem> I<integer> B<(>I<input>B<)>

max memory used for timestamp index (per stream)

=item B<-rtbufsize> I<integer> B<(>I<input>B<)>

max memory used for buffering real-time frames

=item B<-fdebug> I<flags> B<(>I<input/output>B<)>

print specific debug info

Possible values:

=over 4


=item B<ts>



=back


=item B<-max_delay> I<integer> B<(>I<input/output>B<)>

maximum muxing or demuxing delay in microseconds

=item B<-fpsprobesize> I<integer> B<(>I<input>B<)>

number of frames used to probe fps

=item B<-f_err_detect> I<flags> B<(>I<input>B<)>

set error detection flags (deprecated; use err_detect, save via avconv)

Possible values:

=over 4


=item B<crccheck>

verify embedded CRCs

=item B<bitstream>

detect bitstream specification deviations

=item B<buffer>

detect improper bitstream length

=item B<explode>

abort decoding on minor error detection

=back


=item B<-err_detect> I<flags> B<(>I<input>B<)>

set error detection flags

Possible values:

=over 4


=item B<crccheck>

verify embedded CRCs

=item B<bitstream>

detect bitstream specification deviations

=item B<buffer>

detect improper bitstream length

=item B<explode>

abort decoding on minor error detection

=back


=item B<-max_interleave_delta> I<integer> B<(>I<output>B<)>

maximum buffering duration for interleaving

=item B<-f_strict> I<integer> B<(>I<input/output>B<)>

how strictly to follow the standards (deprecated; use strict, save via avconv)

Possible values:

=over 4


=item B<strict>

strictly conform to all the things in the spec no matter what the consequences

=item B<normal>



=item B<experimental>

allow non-standardized experimental variants

=back


=item B<-strict> I<integer> B<(>I<input/output>B<)>

how strictly to follow the standards

Possible values:

=over 4


=item B<strict>

strictly conform to all the things in the spec no matter what the consequences

=item B<normal>



=item B<experimental>

allow non-standardized experimental variants

=back


=back



=head2 Main options



=over 4



=item B<-f> I<format>

Force format to use.


=item B<-of> I<formatter>

Use a specific formatter to output the document. The following
formatters are available

=over 4


=item B<ini>



=item B<json>



=item B<old>

Pseudo-INI format that used to be the only one available in old
avprobe versions.

=back



=item B<-unit>

Show the unit of the displayed values.


=item B<-prefix>

Use SI prefixes for the displayed values.
Unless the "-byte_binary_prefix" option is used all the prefixes
are decimal.


=item B<-byte_binary_prefix>

Force the use of binary prefixes for byte values.


=item B<-sexagesimal>

Use sexagesimal format HH:MM:SS.MICROSECONDS for time values.


=item B<-pretty>

Prettify the format of the displayed values, it corresponds to the
options "-unit -prefix -byte_binary_prefix -sexagesimal".


=item B<-show_format>

Show information about the container format of the input multimedia
stream.

All the container format information is printed within a section with
name "FORMAT".


=item B<-show_format_entry> I<name>

Like B<-show_format>, but only prints the specified entry of the
container format information, rather than all. This option may be given more
than once, then all specified entries will be shown.


=item B<-show_packets>

Show information about each packet contained in the input multimedia
stream.

The information for each single packet is printed within a dedicated
section with name "PACKET".


=item B<-show_streams>

Show information about each media stream contained in the input
multimedia stream.

Each media stream information is printed within a dedicated section
with name "STREAM".


=back


=encoding utf8
=head1 DEMUXERS


Demuxers are configured elements in Libav which allow to read the
multimedia streams from a particular type of file.

When you configure your Libav build, all the supported demuxers
are enabled by default. You can list all available ones using the
configure option "--list-demuxers".

You can disable all the demuxers using the configure option
"--disable-demuxers", and selectively enable a single demuxer with
the option "--enable-demuxer=I<DEMUXER>", or disable it
with the option "--disable-demuxer=I<DEMUXER>".

The option "-formats" of the av* tools will display the list of
enabled demuxers.

The description of some of the currently available demuxers follows.


=head2 image2


Image file demuxer.

This demuxer reads from a list of image files specified by a pattern.

The pattern may contain the string "%d" or "%0I<N>d", which
specifies the position of the characters representing a sequential
number in each filename matched by the pattern. If the form
"%d0I<N>d" is used, the string representing the number in each
filename is 0-padded and I<N> is the total number of 0-padded
digits representing the number. The literal character '%' can be
specified in the pattern with the string "%%".

If the pattern contains "%d" or "%0I<N>d", the first filename of
the file list specified by the pattern must contain a number
inclusively contained between 0 and 4, all the following numbers must
be sequential. This limitation may be hopefully fixed.

The pattern may contain a suffix which is used to automatically
determine the format of the images contained in the files.

For example the pattern "img-%03d.bmp" will match a sequence of
filenames of the form F<img-001.bmp>, F<img-002.bmp>, ...,
F<img-010.bmp>, etc.; the pattern "i%%m%%g-%d.jpg" will match a
sequence of filenames of the form F<i%m%g-1.jpg>,
F<i%m%g-2.jpg>, ..., F<i%m%g-10.jpg>, etc.

The size, the pixel format, and the format of each image must be the
same for all the files in the sequence.

The following example shows how to use B<avconv> for creating a
video from the images in the file sequence F<img-001.jpeg>,
F<img-002.jpeg>, ..., assuming an input framerate of 10 frames per
second:
	
	avconv -i 'img-%03d.jpeg' -r 10 out.mkv


Note that the pattern must not necessarily contain "%d" or
"%0I<N>d", for example to convert a single image file
F<img.jpeg> you can employ the command:
	
	avconv -i img.jpeg img.png



=over 4


=item B<-pixel_format> I<format>

Set the pixel format (for raw image)

=item B<-video_size>   I<size>

Set the frame size (for raw image)

=item B<-framerate>    I<rate>

Set the frame rate

=item B<-loop>         I<bool>

Loop over the images

=item B<-start_number> I<start>

Specify the first number in the sequence

=back



=head2 applehttp


Apple HTTP Live Streaming demuxer.

This demuxer presents all AVStreams from all variant streams.
The id field is set to the bitrate variant index number. By setting
the discard flags on AVStreams (by pressing 'a' or 'v' in avplay),
the caller can decide which variant streams to actually receive.
The total bitrate of the variant that the stream belongs to is
available in a metadata key named "variant_bitrate".


=head2 flv


Adobe Flash Video Format demuxer.

This demuxer is used to demux FLV files and RTMP network streams.


=over 4


=item B<-flv_metadata> I<bool>

Allocate the streams according to the onMetaData array content.

=back



=head2 asf


Advanced Systems Format demuxer.

This demuxer is used to demux ASF files and MMS network streams.


=over 4


=item B<-no_resync_search> I<bool>

Do not try to resynchronize by looking for a certain optional start code.

=back



=encoding utf8
=head1 MUXERS


Muxers are configured elements in Libav which allow writing
multimedia streams to a particular type of file.

When you configure your Libav build, all the supported muxers
are enabled by default. You can list all available muxers using the
configure option C<--list-muxers>.

You can disable all the muxers with the configure option
C<--disable-muxers> and selectively enable / disable single muxers
with the options C<--enable-muxer=I<MUXER>> /
C<--disable-muxer=I<MUXER>>.

The option C<-formats> of the av* tools will display the list of
enabled muxers.

A description of some of the currently available muxers follows.



=head2 crc


CRC (Cyclic Redundancy Check) testing format.

This muxer computes and prints the Adler-32 CRC of all the input audio
and video frames. By default audio frames are converted to signed
16-bit raw audio and video frames to raw video before computing the
CRC.

The output of the muxer consists of a single line of the form:
CRC=0xI<CRC>, where I<CRC> is a hexadecimal number 0-padded to
8 digits containing the CRC for all the decoded input frames.

For example to compute the CRC of the input, and store it in the file
F<out.crc>:
	
	avconv -i INPUT -f crc out.crc


You can print the CRC to stdout with the command:
	
	avconv -i INPUT -f crc -


You can select the output format of each frame with B<avconv> by
specifying the audio and video codec and format. For example to
compute the CRC of the input audio converted to PCM unsigned 8-bit
and the input video converted to MPEG-2 video, use the command:
	
	avconv -i INPUT -c:a pcm_u8 -c:v mpeg2video -f crc -


See also the framecrc muxer.



=head2 framecrc


Per-frame CRC (Cyclic Redundancy Check) testing format.

This muxer computes and prints the Adler-32 CRC for each decoded audio
and video frame. By default audio frames are converted to signed
16-bit raw audio and video frames to raw video before computing the
CRC.

The output of the muxer consists of a line for each audio and video
frame of the form: I<stream_index>, I<frame_dts>,
I<frame_size>, 0xI<CRC>, where I<CRC> is a hexadecimal
number 0-padded to 8 digits containing the CRC of the decoded frame.

For example to compute the CRC of each decoded frame in the input, and
store it in the file F<out.crc>:
	
	avconv -i INPUT -f framecrc out.crc


You can print the CRC of each decoded frame to stdout with the command:
	
	avconv -i INPUT -f framecrc -


You can select the output format of each frame with B<avconv> by
specifying the audio and video codec and format. For example, to
compute the CRC of each decoded input audio frame converted to PCM
unsigned 8-bit and of each decoded input video frame converted to
MPEG-2 video, use the command:
	
	avconv -i INPUT -c:a pcm_u8 -c:v mpeg2video -f framecrc -


See also the crc muxer.



=head2 hls


Apple HTTP Live Streaming muxer that segments MPEG-TS according to
the HTTP Live Streaming specification.

It creates a playlist file and numbered segment files. The output
filename specifies the playlist filename; the segment filenames
receive the same basename as the playlist, a sequential number and
a .ts extension.

	
	avconv -i in.nut out.m3u8



=over 4


=item B<-hls_time> I<seconds>

Set the segment length in seconds.

=item B<-hls_list_size> I<size>

Set the maximum number of playlist entries.

=item B<-hls_wrap> I<wrap>

Set the number after which index wraps.

=item B<-start_number> I<number>

Start the sequence from I<number>.

=item B<-hls_base_url> I<baseurl>

Append I<baseurl> to every entry in the playlist.
Useful to generate playlists with absolute paths.

=back




=head2 image2


Image file muxer.

The image file muxer writes video frames to image files.

The output filenames are specified by a pattern, which can be used to
produce sequentially numbered series of files.
The pattern may contain the string "%d" or "%0I<N>d", this string
specifies the position of the characters representing a numbering in
the filenames. If the form "%0I<N>d" is used, the string
representing the number in each filename is 0-padded to I<N>
digits. The literal character '%' can be specified in the pattern with
the string "%%".

If the pattern contains "%d" or "%0I<N>d", the first filename of
the file list specified will contain the number 1, all the following
numbers will be sequential.

The pattern may contain a suffix which is used to automatically
determine the format of the image files to write.

For example the pattern "img-%03d.bmp" will specify a sequence of
filenames of the form F<img-001.bmp>, F<img-002.bmp>, ...,
F<img-010.bmp>, etc.
The pattern "img%%-%d.jpg" will specify a sequence of filenames of the
form F<img%-1.jpg>, F<img%-2.jpg>, ..., F<img%-10.jpg>,
etc.

The following example shows how to use B<avconv> for creating a
sequence of files F<img-001.jpeg>, F<img-002.jpeg>, ...,
taking one image every second from the input video:
	
	avconv -i in.avi -vsync 1 -r 1 -f image2 'img-%03d.jpeg'


Note that with B<avconv>, if the format is not specified with the
C<-f> option and the output filename specifies an image file
format, the image2 muxer is automatically selected, so the previous
command can be written as:
	
	avconv -i in.avi -vsync 1 -r 1 'img-%03d.jpeg'


Note also that the pattern must not necessarily contain "%d" or
"%0I<N>d", for example to create a single image file
F<img.jpeg> from the input video you can employ the command:
	
	avconv -i in.avi -f image2 -frames:v 1 img.jpeg



=over 4


=item B<-start_number> I<number>

Start the sequence from I<number>.


=item B<-update> I<number>

If I<number> is nonzero, the filename will always be interpreted as just a
filename, not a pattern, and this file will be continuously overwritten with new
images.


=back



=head2 matroska


Matroska container muxer.

This muxer implements the matroska and webm container specs.

The recognized metadata settings in this muxer are:


=over 4



=item B<title=>I<title name>

Name provided to a single track

=back



=over 4



=item B<language=>I<language name>

Specifies the language of the track in the Matroska languages form

=back



=over 4



=item B<STEREO_MODE=>I<mode>

Stereo 3D video layout of two views in a single video track

=over 4


=item B<mono>

video is not stereo

=item B<left_right>

Both views are arranged side by side, Left-eye view is on the left

=item B<bottom_top>

Both views are arranged in top-bottom orientation, Left-eye view is at bottom

=item B<top_bottom>

Both views are arranged in top-bottom orientation, Left-eye view is on top

=item B<checkerboard_rl>

Each view is arranged in a checkerboard interleaved pattern, Left-eye view being first

=item B<checkerboard_lr>

Each view is arranged in a checkerboard interleaved pattern, Right-eye view being first

=item B<row_interleaved_rl>

Each view is constituted by a row based interleaving, Right-eye view is first row

=item B<row_interleaved_lr>

Each view is constituted by a row based interleaving, Left-eye view is first row

=item B<col_interleaved_rl>

Both views are arranged in a column based interleaving manner, Right-eye view is first column

=item B<col_interleaved_lr>

Both views are arranged in a column based interleaving manner, Left-eye view is first column

=item B<anaglyph_cyan_red>

All frames are in anaglyph format viewable through red-cyan filters

=item B<right_left>

Both views are arranged side by side, Right-eye view is on the left

=item B<anaglyph_green_magenta>

All frames are in anaglyph format viewable through green-magenta filters

=item B<block_lr>

Both eyes laced in one Block, Left-eye view is first

=item B<block_rl>

Both eyes laced in one Block, Right-eye view is first

=back


=back


For example a 3D WebM clip can be created using the following command line:
	
	avconv -i sample_left_right_clip.mpg -an -c:v libvpx -metadata STEREO_MODE=left_right -y stereo_clip.webm


This muxer supports the following options:


=over 4



=item B<reserve_index_space>

By default, this muxer writes the index for seeking (called cues in Matroska
terms) at the end of the file, because it cannot know in advance how much space
to leave for the index at the beginning of the file. However for some use cases
-- e.g.  streaming where seeking is possible but slow -- it is useful to put the
index at the beginning of the file.

If this option is set to a non-zero value, the muxer will reserve a given amount
of space in the file header and then try to write the cues there when the muxing
finishes. If the available space does not suffice, muxing will fail. A safe size
for most use cases should be about 50kB per hour of video.

Note that cues are only written if the output is seekable and this option will
have no effect if it is not.


=back



=head2 mov, mp4, ismv


The mov/mp4/ismv muxer supports fragmentation. Normally, a MOV/MP4
file has all the metadata about all packets stored in one location
(written at the end of the file, it can be moved to the start for
better playback using the B<qt-faststart> tool). A fragmented
file consists of a number of fragments, where packets and metadata
about these packets are stored together. Writing a fragmented
file has the advantage that the file is decodable even if the
writing is interrupted (while a normal MOV/MP4 is undecodable if
it is not properly finished), and it requires less memory when writing
very long files (since writing normal MOV/MP4 files stores info about
every single packet in memory until the file is closed). The downside
is that it is less compatible with other applications.

Fragmentation is enabled by setting one of the AVOptions that define
how to cut the file into fragments:


=over 4


=item B<-movflags frag_keyframe>

Start a new fragment at each video keyframe.

=item B<-frag_duration> I<duration>

Create fragments that are I<duration> microseconds long.

=item B<-frag_size> I<size>

Create fragments that contain up to I<size> bytes of payload data.

=item B<-movflags frag_custom>

Allow the caller to manually choose when to cut fragments, by
calling C<av_write_frame(ctx, NULL)> to write a fragment with
the packets written so far. (This is only useful with other
applications integrating libavformat, not from B<avconv>.)

=item B<-min_frag_duration> I<duration>

Don't create fragments that are shorter than I<duration> microseconds long.

=back


If more than one condition is specified, fragments are cut when
one of the specified conditions is fulfilled. The exception to this is
C<-min_frag_duration>, which has to be fulfilled for any of the other
conditions to apply.

Additionally, the way the output file is written can be adjusted
through a few other options:


=over 4


=item B<-movflags empty_moov>

Write an initial moov atom directly at the start of the file, without
describing any samples in it. Generally, an mdat/moov pair is written
at the start of the file, as a normal MOV/MP4 file, containing only
a short portion of the file. With this option set, there is no initial
mdat atom, and the moov atom only describes the tracks but has
a zero duration.

Files written with this option set do not work in QuickTime.
This option is implicitly set when writing ismv (Smooth Streaming) files.

=item B<-movflags separate_moof>

Write a separate moof (movie fragment) atom for each track. Normally,
packets for all tracks are written in a moof atom (which is slightly
more efficient), but with this option set, the muxer writes one moof/mdat
pair for each track, making it easier to separate tracks.

This option is implicitly set when writing ismv (Smooth Streaming) files.

=item B<-movflags faststart>

Run a second pass moving the index (moov atom) to the beginning of the file.
This operation can take a while, and will not work in various situations such
as fragmented output, thus it is not enabled by default.

=item B<-movflags disable_chpl>

Disable Nero chapter markers (chpl atom).  Normally, both Nero chapters
and a QuickTime chapter track are written to the file. With this option
set, only the QuickTime chapter track will be written. Nero chapters can
cause failures when the file is reprocessed with certain tagging programs.

=back


Smooth Streaming content can be pushed in real time to a publishing
point on IIS with this muxer. Example:
	
	avconv -re <<normal input/transcoding options>> -movflags isml+frag_keyframe -f ismv http://server/publishingpoint.isml/Streams(Encoder1)



=head2 mp3


The MP3 muxer writes a raw MP3 stream with an ID3v2 header at the beginning and
optionally an ID3v1 tag at the end. ID3v2.3 and ID3v2.4 are supported, the
C<id3v2_version> option controls which one is used. Setting
C<id3v2_version> to 0 will disable the ID3v2 header completely. The legacy
ID3v1 tag is not written by default, but may be enabled with the
C<write_id3v1> option.

The muxer may also write a Xing frame at the beginning, which contains the
number of frames in the file. It is useful for computing duration of VBR files.
The Xing frame is written if the output stream is seekable and if the
C<write_xing> option is set to 1 (the default).

The muxer supports writing ID3v2 attached pictures (APIC frames). The pictures
are supplied to the muxer in form of a video stream with a single packet. There
can be any number of those streams, each will correspond to a single APIC frame.
The stream metadata tags I<title> and I<comment> map to APIC
I<description> and I<picture type> respectively. See
E<lt>B<http://id3.org/id3v2.4.0-frames>E<gt> for allowed picture types.

Note that the APIC frames must be written at the beginning, so the muxer will
buffer the audio frames until it gets all the pictures. It is therefore advised
to provide the pictures as soon as possible to avoid excessive buffering.

Examples:

Write an mp3 with an ID3v2.3 header and an ID3v1 footer:
	
	avconv -i INPUT -id3v2_version 3 -write_id3v1 1 out.mp3


Attach a picture to an mp3:
	
	avconv -i input.mp3 -i cover.png -c copy -metadata:s:v title="Album cover"
	-metadata:s:v comment="Cover (Front)" out.mp3


Write a "clean" MP3 without any extra features:
	
	avconv -i input.wav -write_xing 0 -id3v2_version 0 out.mp3



=head2 mpegts


MPEG transport stream muxer.

This muxer implements ISO 13818-1 and part of ETSI EN 300 468.

The muxer options are:


=over 4


=item B<-mpegts_original_network_id> I<number>

Set the original_network_id (default 0x0001). This is unique identifier
of a network in DVB. Its main use is in the unique identification of a
service through the path Original_Network_ID, Transport_Stream_ID.

=item B<-mpegts_transport_stream_id> I<number>

Set the transport_stream_id (default 0x0001). This identifies a
transponder in DVB.

=item B<-mpegts_service_id> I<number>

Set the service_id (default 0x0001) also known as program in DVB.

=item B<-mpegts_pmt_start_pid> I<number>

Set the first PID for PMT (default 0x1000, max 0x1f00).

=item B<-mpegts_start_pid> I<number>

Set the first PID for data packets (default 0x0100, max 0x0f00).

=item B<-muxrate> I<number>

Set a constant muxrate (default VBR).

=item B<-pcr_period> I<numer>

Override the default PCR retransmission time (default 20ms), ignored
if variable muxrate is selected.

=back


The recognized metadata settings in mpegts muxer are C<service_provider>
and C<service_name>. If they are not set the default for
C<service_provider> is "Libav" and the default for
C<service_name> is "Service01".

	
	avconv -i file.mpg -c copy \
	     -mpegts_original_network_id 0x1122 \
	     -mpegts_transport_stream_id 0x3344 \
	     -mpegts_service_id 0x5566 \
	     -mpegts_pmt_start_pid 0x1500 \
	     -mpegts_start_pid 0x150 \
	     -metadata service_provider="Some provider" \
	     -metadata service_name="Some Channel" \
	     -y out.ts



=head2 null


Null muxer.

This muxer does not generate any output file, it is mainly useful for
testing or benchmarking purposes.

For example to benchmark decoding with B<avconv> you can use the
command:
	
	avconv -benchmark -i INPUT -f null out.null


Note that the above command does not read or write the F<out.null>
file, but specifying the output file is required by the B<avconv>
syntax.

Alternatively you can write the command as:
	
	avconv -benchmark -i INPUT -f null -



=head2 nut



=over 4


=item B<-syncpoints> I<flags>

Change the syncpoint usage in nut:

=over 4


=item I<default> B<use the normal low-overhead seeking aids.>


=item I<none> B<do not use the syncpoints at all, reducing the overhead but making the stream non-seekable;>


=item I<timestamped> B<extend the syncpoint with a wallclock field.>


=back

The I<none> and I<timestamped> flags are experimental.

=back


	
	avconv -i INPUT -f_strict experimental -syncpoints none - | processor



=head2 ogg


Ogg container muxer.


=over 4


=item B<-page_duration> I<duration>

Preferred page duration, in microseconds. The muxer will attempt to create
pages that are approximately I<duration> microseconds long. This allows the
user to compromise between seek granularity and container overhead. The default
is 1 second. A value of 0 will fill all segments, making pages as large as
possible. A value of 1 will effectively use 1 packet-per-page in most
situations, giving a small seek granularity at the cost of additional container
overhead.

=back



=head2 segment


Basic stream segmenter.

The segmenter muxer outputs streams to a number of separate files of nearly
fixed duration. Output filename pattern can be set in a fashion similar to
image2.

Every segment starts with a video keyframe, if a video stream is present.
The segment muxer works best with a single constant frame rate video.

Optionally it can generate a flat list of the created segments, one segment
per line.


=over 4


=item B<segment_format> I<format>

Override the inner container format, by default it is guessed by the filename
extension.

=item B<segment_time> I<t>

Set segment duration to I<t> seconds.

=item B<segment_list> I<name>

Generate also a listfile named I<name>.

=item B<segment_list_type> I<type>

Select the listing format.

=over 4


=item I<flat> B<use a simple flat list of entries.>


=item I<hls> B<use a m3u8-like structure.>


=back


=item B<segment_list_size> I<size>

Overwrite the listfile once it reaches I<size> entries.

=item B<segment_list_entry_prefix> I<prefix>

Prepend I<prefix> to each entry. Useful to generate absolute paths.

=item B<segment_wrap> I<limit>

Wrap around segment index once it reaches I<limit>.

=back


	
	avconv -i in.mkv -c copy -map 0 -f segment -list out.list out%03d.nut



=encoding utf8
=head1 PROTOCOLS


Protocols are configured elements in Libav which allow to access
resources which require the use of a particular protocol.

When you configure your Libav build, all the supported protocols are
enabled by default. You can list all available ones using the
configure option "--list-protocols".

You can disable all the protocols using the configure option
"--disable-protocols", and selectively enable a protocol using the
option "--enable-protocol=I<PROTOCOL>", or you can disable a
particular protocol using the option
"--disable-protocol=I<PROTOCOL>".

The option "-protocols" of the av* tools will display the list of
supported protocols.

A description of the currently available protocols follows.


=head2 concat


Physical concatenation protocol.

Allow to read and seek from many resource in sequence as if they were
a unique resource.

A URL accepted by this protocol has the syntax:
	
	concat:<URL1>|<URL2>|...|<URLN>


where I<URL1>, I<URL2>, ..., I<URLN> are the urls of the
resource to be concatenated, each one possibly specifying a distinct
protocol.

For example to read a sequence of files F<split1.mpeg>,
F<split2.mpeg>, F<split3.mpeg> with B<avplay> use the
command:
	
	avplay concat:split1.mpeg\|split2.mpeg\|split3.mpeg


Note that you may need to escape the character "|" which is special for
many shells.


=head2 file


File access protocol.

Allow to read from or read to a file.

For example to read from a file F<input.mpeg> with B<avconv>
use the command:
	
	avconv -i file:input.mpeg output.mpeg


The av* tools default to the file protocol, that is a resource
specified with the name "FILE.mpeg" is interpreted as the URL
"file:FILE.mpeg".


=head2 gopher


Gopher protocol.


=head2 hls


Read Apple HTTP Live Streaming compliant segmented stream as
a uniform one. The M3U8 playlists describing the segments can be
remote HTTP resources or local files, accessed using the standard
file protocol.
The nested protocol is declared by specifying
"+I<proto>" after the hls URI scheme name, where I<proto>
is either "file" or "http".

	
	hls+http://host/path/to/remote/resource.m3u8
	hls+file://path/to/local/resource.m3u8


Using this protocol is discouraged - the hls demuxer should work
just as well (if not, please report the issues) and is more complete.
To use the hls demuxer instead, simply use the direct URLs to the
m3u8 files.


=head2 http


HTTP (Hyper Text Transfer Protocol).

This protocol accepts the following options:


=over 4


=item B<chunked_post>

If set to 1 use chunked Transfer-Encoding for posts, default is 1.


=item B<content_type>

Set a specific content type for the POST messages.


=item B<headers>

Set custom HTTP headers, can override built in default headers. The
value must be a string encoding the headers.


=item B<multiple_requests>

Use persistent connections if set to 1, default is 0.


=item B<post_data>

Set custom HTTP post data.


=item B<user_agent>

Override the User-Agent header. If not specified a string of the form
"Lavf/E<lt>versionE<gt>" will be used.


=item B<mime_type>

Export the MIME type.


=item B<icy>

If set to 1 request ICY (SHOUTcast) metadata from the server. If the server
supports this, the metadata has to be retrieved by the application by reading
the B<icy_metadata_headers> and B<icy_metadata_packet> options.
The default is 1.


=item B<icy_metadata_headers>

If the server supports ICY metadata, this contains the ICY-specific HTTP reply
headers, separated by newline characters.


=item B<icy_metadata_packet>

If the server supports ICY metadata, and B<icy> was set to 1, this
contains the last non-empty metadata packet sent by the server. It should be
polled in regular intervals by applications interested in mid-stream metadata
updates.


=item B<offset>

Set initial byte offset.


=item B<end_offset>

Try to limit the request to bytes preceding this offset.

=back



=head2 Icecast


Icecast (stream to Icecast servers)

This protocol accepts the following options:


=over 4


=item B<ice_genre>

Set the stream genre.


=item B<ice_name>

Set the stream name.


=item B<ice_description>

Set the stream description.


=item B<ice_url>

Set the stream website URL.


=item B<ice_public>

Set if the stream should be public or not.
The default is 0 (not public).


=item B<user_agent>

Override the User-Agent header. If not specified a string of the form
"Lavf/E<lt>versionE<gt>" will be used.


=item B<password>

Set the Icecast mountpoint password.


=item B<content_type>

Set the stream content type. This must be set if it is different from
audio/mpeg.


=item B<legacy_icecast>

This enables support for Icecast versions E<lt> 2.4.0, that do not support the
HTTP PUT method but the SOURCE method.


=back



=head2 mmst


MMS (Microsoft Media Server) protocol over TCP.


=head2 mmsh


MMS (Microsoft Media Server) protocol over HTTP.

The required syntax is:
	
	mmsh://<server>[:<port>][/<app>][/<playpath>]



=head2 md5


MD5 output protocol.

Computes the MD5 hash of the data to be written, and on close writes
this to the designated output or stdout if none is specified. It can
be used to test muxers without writing an actual file.

Some examples follow.
	
	# Write the MD5 hash of the encoded AVI file to the file output.avi.md5.
	avconv -i input.flv -f avi -y md5:output.avi.md5
	
	# Write the MD5 hash of the encoded AVI file to stdout.
	avconv -i input.flv -f avi -y md5:


Note that some formats (typically MOV) require the output protocol to
be seekable, so they will fail with the MD5 output protocol.


=head2 pipe


UNIX pipe access protocol.

Allow to read and write from UNIX pipes.

The accepted syntax is:
	
	pipe:[<number>]


I<number> is the number corresponding to the file descriptor of the
pipe (e.g. 0 for stdin, 1 for stdout, 2 for stderr).  If I<number>
is not specified, by default the stdout file descriptor will be used
for writing, stdin for reading.

For example to read from stdin with B<avconv>:
	
	cat test.wav | avconv -i pipe:0
	# ...this is the same as...
	cat test.wav | avconv -i pipe:


For writing to stdout with B<avconv>:
	
	avconv -i test.wav -f avi pipe:1 | cat > test.avi
	# ...this is the same as...
	avconv -i test.wav -f avi pipe: | cat > test.avi


Note that some formats (typically MOV), require the output protocol to
be seekable, so they will fail with the pipe output protocol.


=head2 rtmp


Real-Time Messaging Protocol.

The Real-Time Messaging Protocol (RTMP) is used for streaming multimedia
content across a TCP/IP network.

The required syntax is:
	
	rtmp://[<username>:<password>@]<server>[:<port>][/<app>][/<instance>][/<playpath>]


The accepted parameters are:

=over 4



=item B<username>

An optional username (mostly for publishing).


=item B<password>

An optional password (mostly for publishing).


=item B<server>

The address of the RTMP server.


=item B<port>

The number of the TCP port to use (by default is 1935).


=item B<app>

It is the name of the application to access. It usually corresponds to
the path where the application is installed on the RTMP server
(e.g. F</ondemand/>, F</flash/live/>, etc.). You can override
the value parsed from the URI through the C<rtmp_app> option, too.


=item B<playpath>

It is the path or name of the resource to play with reference to the
application specified in I<app>, may be prefixed by "mp4:". You
can override the value parsed from the URI through the C<rtmp_playpath>
option, too.


=item B<listen>

Act as a server, listening for an incoming connection.


=item B<timeout>

Maximum time to wait for the incoming connection. Implies listen.

=back


Additionally, the following parameters can be set via command line options
(or in code via C<AVOption>s):

=over 4



=item B<rtmp_app>

Name of application to connect on the RTMP server. This option
overrides the parameter specified in the URI.


=item B<rtmp_buffer>

Set the client buffer time in milliseconds. The default is 3000.


=item B<rtmp_conn>

Extra arbitrary AMF connection parameters, parsed from a string,
e.g. like C<B:1 S:authMe O:1 NN:code:1.23 NS:flag:ok O:0>.
Each value is prefixed by a single character denoting the type,
B for Boolean, N for number, S for string, O for object, or Z for null,
followed by a colon. For Booleans the data must be either 0 or 1 for
FALSE or TRUE, respectively.  Likewise for Objects the data must be 0 or
1 to end or begin an object, respectively. Data items in subobjects may
be named, by prefixing the type with 'N' and specifying the name before
the value (i.e. C<NB:myFlag:1>). This option may be used multiple
times to construct arbitrary AMF sequences.


=item B<rtmp_flashver>

Version of the Flash plugin used to run the SWF player. The default
is LNX 9,0,124,2. (When publishing, the default is FMLE/3.0 (compatible;
E<lt>libavformat versionE<gt>).)


=item B<rtmp_flush_interval>

Number of packets flushed in the same request (RTMPT only). The default
is 10.


=item B<rtmp_live>

Specify that the media is a live stream. No resuming or seeking in
live streams is possible. The default value is C<any>, which means the
subscriber first tries to play the live stream specified in the
playpath. If a live stream of that name is not found, it plays the
recorded stream. The other possible values are C<live> and
C<recorded>.


=item B<rtmp_pageurl>

URL of the web page in which the media was embedded. By default no
value will be sent.


=item B<rtmp_playpath>

Stream identifier to play or to publish. This option overrides the
parameter specified in the URI.


=item B<rtmp_subscribe>

Name of live stream to subscribe to. By default no value will be sent.
It is only sent if the option is specified or if rtmp_live
is set to live.


=item B<rtmp_swfhash>

SHA256 hash of the decompressed SWF file (32 bytes).


=item B<rtmp_swfsize>

Size of the decompressed SWF file, required for SWFVerification.


=item B<rtmp_swfurl>

URL of the SWF player for the media. By default no value will be sent.


=item B<rtmp_swfverify>

URL to player swf file, compute hash/size automatically.


=item B<rtmp_tcurl>

URL of the target stream. Defaults to proto://host[:port]/app.


=back


For example to read with B<avplay> a multimedia resource named
"sample" from the application "vod" from an RTMP server "myserver":
	
	avplay rtmp://myserver/vod/sample


To publish to a password protected server, passing the playpath and
app names separately:
	
	avconv -re -i <input> -f flv -rtmp_playpath some/long/path -rtmp_app long/app/name rtmp://username:password@myserver/



=head2 rtmpe


Encrypted Real-Time Messaging Protocol.

The Encrypted Real-Time Messaging Protocol (RTMPE) is used for
streaming multimedia content within standard cryptographic primitives,
consisting of Diffie-Hellman key exchange and HMACSHA256, generating
a pair of RC4 keys.


=head2 rtmps


Real-Time Messaging Protocol over a secure SSL connection.

The Real-Time Messaging Protocol (RTMPS) is used for streaming
multimedia content across an encrypted connection.


=head2 rtmpt


Real-Time Messaging Protocol tunneled through HTTP.

The Real-Time Messaging Protocol tunneled through HTTP (RTMPT) is used
for streaming multimedia content within HTTP requests to traverse
firewalls.


=head2 rtmpte


Encrypted Real-Time Messaging Protocol tunneled through HTTP.

The Encrypted Real-Time Messaging Protocol tunneled through HTTP (RTMPTE)
is used for streaming multimedia content within HTTP requests to traverse
firewalls.


=head2 rtmpts


Real-Time Messaging Protocol tunneled through HTTPS.

The Real-Time Messaging Protocol tunneled through HTTPS (RTMPTS) is used
for streaming multimedia content within HTTPS requests to traverse
firewalls.


=head2 librtmp rtmp, rtmpe, rtmps, rtmpt, rtmpte


Real-Time Messaging Protocol and its variants supported through
librtmp.

Requires the presence of the librtmp headers and library during
configuration. You need to explicitly configure the build with
"--enable-librtmp". If enabled this will replace the native RTMP
protocol.

This protocol provides most client functions and a few server
functions needed to support RTMP, RTMP tunneled in HTTP (RTMPT),
encrypted RTMP (RTMPE), RTMP over SSL/TLS (RTMPS) and tunneled
variants of these encrypted types (RTMPTE, RTMPTS).

The required syntax is:
	
	<rtmp_proto>://<server>[:<port>][/<app>][/<playpath>] <options>


where I<rtmp_proto> is one of the strings "rtmp", "rtmpt", "rtmpe",
"rtmps", "rtmpte", "rtmpts" corresponding to each RTMP variant, and
I<server>, I<port>, I<app> and I<playpath> have the same
meaning as specified for the RTMP native protocol.
I<options> contains a list of space-separated options of the form
I<key>=I<val>.

See the librtmp manual page (man 3 librtmp) for more information.

For example, to stream a file in real-time to an RTMP server using
B<avconv>:
	
	avconv -re -i myfile -f flv rtmp://myserver/live/mystream


To play the same stream using B<avplay>:
	
	avplay "rtmp://myserver/live/mystream live=1"



=head2 rtp


Real-Time Protocol.


=head2 rtsp


RTSP is not technically a protocol handler in libavformat, it is a demuxer
and muxer. The demuxer supports both normal RTSP (with data transferred
over RTP; this is used by e.g. Apple and Microsoft) and Real-RTSP (with
data transferred over RDT).

The muxer can be used to send a stream using RTSP ANNOUNCE to a server
supporting it (currently Darwin Streaming Server and Mischa Spiegelmock's
 RTSP server (C<http://github.com/revmischa/rtsp-server>)).

The required syntax for a RTSP url is:
	
	rtsp://<hostname>[:<port>]/<path>


The following options (set on the B<avconv>/B<avplay> command
line, or set in code via C<AVOption>s or in C<avformat_open_input>),
are supported:

Flags for C<rtsp_transport>:


=over 4



=item B<udp>

Use UDP as lower transport protocol.


=item B<tcp>

Use TCP (interleaving within the RTSP control channel) as lower
transport protocol.


=item B<udp_multicast>

Use UDP multicast as lower transport protocol.


=item B<http>

Use HTTP tunneling as lower transport protocol, which is useful for
passing proxies.

=back


Multiple lower transport protocols may be specified, in that case they are
tried one at a time (if the setup of one fails, the next one is tried).
For the muxer, only the C<tcp> and C<udp> options are supported.

Flags for C<rtsp_flags>:


=over 4


=item B<filter_src>

Accept packets only from negotiated peer address and port.

=item B<listen>

Act as a server, listening for an incoming connection.

=back


When receiving data over UDP, the demuxer tries to reorder received packets
(since they may arrive out of order, or packets may get lost totally). This
can be disabled by setting the maximum demuxing delay to zero (via
the C<max_delay> field of AVFormatContext).

When watching multi-bitrate Real-RTSP streams with B<avplay>, the
streams to display can be chosen with C<-vst> I<n> and
C<-ast> I<n> for video and audio respectively, and can be switched
on the fly by pressing C<v> and C<a>.

Example command lines:

To watch a stream over UDP, with a max reordering delay of 0.5 seconds:

	
	avplay -max_delay 500000 -rtsp_transport udp rtsp://server/video.mp4


To watch a stream tunneled over HTTP:

	
	avplay -rtsp_transport http rtsp://server/video.mp4


To send a stream in realtime to a RTSP server, for others to watch:

	
	avconv -re -i <input> -f rtsp -muxdelay 0.1 rtsp://server/live.sdp


To receive a stream in realtime:

	
	avconv -rtsp_flags listen -i rtsp://ownaddress/live.sdp <output>



=head2 sap


Session Announcement Protocol (RFC 2974). This is not technically a
protocol handler in libavformat, it is a muxer and demuxer.
It is used for signalling of RTP streams, by announcing the SDP for the
streams regularly on a separate port.


=head3 Muxer


The syntax for a SAP url given to the muxer is:
	
	sap://<destination>[:<port>][?<options>]


The RTP packets are sent to I<destination> on port I<port>,
or to port 5004 if no port is specified.
I<options> is a C<&>-separated list. The following options
are supported:


=over 4



=item B<announce_addr=>I<address>

Specify the destination IP address for sending the announcements to.
If omitted, the announcements are sent to the commonly used SAP
announcement multicast address 224.2.127.254 (sap.mcast.net), or
ff0e::2:7ffe if I<destination> is an IPv6 address.


=item B<announce_port=>I<port>

Specify the port to send the announcements on, defaults to
9875 if not specified.


=item B<ttl=>I<ttl>

Specify the time to live value for the announcements and RTP packets,
defaults to 255.


=item B<same_port=>I<0|1>

If set to 1, send all RTP streams on the same port pair. If zero (the
default), all streams are sent on unique ports, with each stream on a
port 2 numbers higher than the previous.
VLC/Live555 requires this to be set to 1, to be able to receive the stream.
The RTP stack in libavformat for receiving requires all streams to be sent
on unique ports.

=back


Example command lines follow.

To broadcast a stream on the local subnet, for watching in VLC:

	
	avconv -re -i <input> -f sap sap://224.0.0.255?same_port=1


Similarly, for watching in avplay:

	
	avconv -re -i <input> -f sap sap://224.0.0.255


And for watching in avplay, over IPv6:

	
	avconv -re -i <input> -f sap sap://[ff0e::1:2:3:4]



=head3 Demuxer


The syntax for a SAP url given to the demuxer is:
	
	sap://[<address>][:<port>]


I<address> is the multicast address to listen for announcements on,
if omitted, the default 224.2.127.254 (sap.mcast.net) is used. I<port>
is the port that is listened on, 9875 if omitted.

The demuxers listens for announcements on the given address and port.
Once an announcement is received, it tries to receive that particular stream.

Example command lines follow.

To play back the first stream announced on the normal SAP multicast address:

	
	avplay sap://


To play back the first stream announced on one the default IPv6 SAP multicast address:

	
	avplay sap://[ff0e::2:7ffe]



=head2 tcp


Trasmission Control Protocol.

The required syntax for a TCP url is:
	
	tcp://<hostname>:<port>[?<options>]



=over 4



=item B<listen>

Listen for an incoming connection

	
	avconv -i <input> -f <format> tcp://<hostname>:<port>?listen
	avplay tcp://<hostname>:<port>



=back



=head2 tls


Transport Layer Security (TLS) / Secure Sockets Layer (SSL)

The required syntax for a TLS url is:
	
	tls://<hostname>:<port>


The following parameters can be set via command line options
(or in code via C<AVOption>s):


=over 4



=item B<ca_file>

A file containing certificate authority (CA) root certificates to treat
as trusted. If the linked TLS library contains a default this might not
need to be specified for verification to work, but not all libraries and
setups have defaults built in.


=item B<tls_verify=>I<1|0>

If enabled, try to verify the peer that we are communicating with.
Note, if using OpenSSL, this currently only makes sure that the
peer certificate is signed by one of the root certificates in the CA
database, but it does not validate that the certificate actually
matches the host name we are trying to connect to. (With GnuTLS,
the host name is validated as well.)

This is disabled by default since it requires a CA database to be
provided by the caller in many cases.


=item B<cert_file>

A file containing a certificate to use in the handshake with the peer.
(When operating as server, in listen mode, this is more often required
by the peer, while client certificates only are mandated in certain
setups.)


=item B<key_file>

A file containing the private key for the certificate.


=item B<listen=>I<1|0>

If enabled, listen for connections on the provided port, and assume
the server role in the handshake instead of the client role.


=back



=head2 udp


User Datagram Protocol.

The required syntax for a UDP url is:
	
	udp://<hostname>:<port>[?<options>]


I<options> contains a list of &-separated options of the form I<key>=I<val>.
Follow the list of supported options.


=over 4



=item B<buffer_size=>I<size>

set the UDP buffer size in bytes


=item B<localport=>I<port>

override the local UDP port to bind with


=item B<localaddr=>I<addr>

Choose the local IP address. This is useful e.g. if sending multicast
and the host has multiple interfaces, where the user can choose
which interface to send on by specifying the IP address of that interface.


=item B<pkt_size=>I<size>

set the size in bytes of UDP packets


=item B<reuse=>I<1|0>

explicitly allow or disallow reusing UDP sockets


=item B<ttl=>I<ttl>

set the time to live value (for multicast only)


=item B<connect=>I<1|0>

Initialize the UDP socket with C<connect()>. In this case, the
destination address can't be changed with ff_udp_set_remote_url later.
If the destination address isn't known at the start, this option can
be specified in ff_udp_set_remote_url, too.
This allows finding out the source address for the packets with getsockname,
and makes writes return with AVERROR(ECONNREFUSED) if "destination
unreachable" is received.
For receiving, this gives the benefit of only receiving packets from
the specified peer address/port.


=item B<sources=>I<address>B<[,>I<address>B<]>

Only receive packets sent to the multicast group from one of the
specified sender IP addresses.


=item B<block=>I<address>B<[,>I<address>B<]>

Ignore packets sent to the multicast group from the specified
sender IP addresses.

=back


Some usage examples of the udp protocol with B<avconv> follow.

To stream over UDP to a remote endpoint:
	
	avconv -i <input> -f <format> udp://<hostname>:<port>


To stream in mpegts format over UDP using 188 sized UDP packets, using a large input buffer:
	
	avconv -i <input> -f mpegts udp://<hostname>:<port>?pkt_size=188&buffer_size=65535


To receive over UDP from a remote endpoint:
	
	avconv -i udp://[<multicast-address>]:<port>



=head2 unix


Unix local socket

The required syntax for a Unix socket URL is:

	
	unix://<filepath>


The following parameters can be set via command line options
(or in code via C<AVOption>s):


=over 4


=item B<timeout>

Timeout in ms.

=item B<listen>

Create the Unix socket in listening mode.

=back



=encoding utf8
=head1 INPUT DEVICES


Input devices are configured elements in Libav which allow to access
the data coming from a multimedia device attached to your system.

When you configure your Libav build, all the supported input devices
are enabled by default. You can list all available ones using the
configure option "--list-indevs".

You can disable all the input devices using the configure option
"--disable-indevs", and selectively enable an input device using the
option "--enable-indev=I<INDEV>", or you can disable a particular
input device using the option "--disable-indev=I<INDEV>".

The option "-formats" of the av* tools will display the list of
supported input devices (amongst the demuxers).

A description of the currently available input devices follows.


=head2 alsa


ALSA (Advanced Linux Sound Architecture) input device.

To enable this input device during configuration you need libasound
installed on your system.

This device allows capturing from an ALSA device. The name of the
device to capture has to be an ALSA card identifier.

An ALSA identifier has the syntax:
	
	hw:<CARD>[,<DEV>[,<SUBDEV>]]


where the I<DEV> and I<SUBDEV> components are optional.

The three arguments (in order: I<CARD>,I<DEV>,I<SUBDEV>)
specify card number or identifier, device number and subdevice number
(-1 means any).

To see the list of cards currently recognized by your system check the
files F</proc/asound/cards> and F</proc/asound/devices>.

For example to capture with B<avconv> from an ALSA device with
card id 0, you may run the command:
	
	avconv -f alsa -i hw:0 alsaout.wav


For more information see:
E<lt>B<http://www.alsa-project.org/alsa-doc/alsa-lib/pcm.html>E<gt>


=head2 bktr


BSD video input device.


=head2 dv1394


Linux DV 1394 input device.


=head2 fbdev


Linux framebuffer input device.

The Linux framebuffer is a graphic hardware-independent abstraction
layer to show graphics on a computer monitor, typically on the
console. It is accessed through a file device node, usually
F</dev/fb0>.

For more detailed information read the file
Documentation/fb/framebuffer.txt included in the Linux source tree.

To record from the framebuffer device F</dev/fb0> with
B<avconv>:
	
	avconv -f fbdev -r 10 -i /dev/fb0 out.avi


You can take a single screenshot image with the command:
	
	avconv -f fbdev -frames:v 1 -r 1 -i /dev/fb0 screenshot.jpeg


See also E<lt>B<http://linux-fbdev.sourceforge.net/>E<gt>, and fbset(1).


=head2 jack


JACK input device.

To enable this input device during configuration you need libjack
installed on your system.

A JACK input device creates one or more JACK writable clients, one for
each audio channel, with name I<client_name>:input_I<N>, where
I<client_name> is the name provided by the application, and I<N>
is a number which identifies the channel.
Each writable client will send the acquired data to the Libav input
device.

Once you have created one or more JACK readable clients, you need to
connect them to one or more JACK writable clients.

To connect or disconnect JACK clients you can use the
F<jack_connect> and F<jack_disconnect> programs, or do it
through a graphical interface, for example with F<qjackctl>.

To list the JACK clients and their properties you can invoke the command
F<jack_lsp>.

Follows an example which shows how to capture a JACK readable client
with B<avconv>.
	
	# Create a JACK writable client with name "libav".
	$ avconv -f jack -i libav -y out.wav
	
	# Start the sample jack_metro readable client.
	$ jack_metro -b 120 -d 0.2 -f 4000
	
	# List the current JACK clients.
	$ jack_lsp -c
	system:capture_1
	system:capture_2
	system:playback_1
	system:playback_2
	libav:input_1
	metro:120_bpm
	
	# Connect metro to the avconv writable client.
	$ jack_connect metro:120_bpm libav:input_1


For more information read:
E<lt>B<http://jackaudio.org/>E<gt>


=head2 libdc1394


IIDC1394 input device, based on libdc1394 and libraw1394.


=head2 oss


Open Sound System input device.

The filename to provide to the input device is the device node
representing the OSS input device, and is usually set to
F</dev/dsp>.

For example to grab from F</dev/dsp> using B<avconv> use the
command:
	
	avconv -f oss -i /dev/dsp /tmp/oss.wav


For more information about OSS see:
E<lt>B<http://manuals.opensound.com/usersguide/dsp.html>E<gt>


=head2 pulse


pulseaudio input device.

To enable this input device during configuration you need libpulse-simple
installed in your system.

The filename to provide to the input device is a source device or the
string "default"

To list the pulse source devices and their properties you can invoke
the command F<pactl list sources>.

	
	avconv -f pulse -i default /tmp/pulse.wav



=head3 I<server> AVOption


The syntax is:
	
	-server <server name>


Connects to a specific server.


=head3 I<name> AVOption


The syntax is:
	
	-name <application name>


Specify the application name pulse will use when showing active clients,
by default it is "libav"


=head3 I<stream_name> AVOption


The syntax is:
	
	-stream_name <stream name>


Specify the stream name pulse will use when showing active streams,
by default it is "record"


=head3 I<sample_rate> AVOption


The syntax is:
	
	-sample_rate <samplerate>


Specify the samplerate in Hz, by default 48kHz is used.


=head3 I<channels> AVOption


The syntax is:
	
	-channels <N>


Specify the channels in use, by default 2 (stereo) is set.


=head3 I<frame_size> AVOption


The syntax is:
	
	-frame_size <bytes>


Specify the number of byte per frame, by default it is set to 1024.


=head3 I<fragment_size> AVOption


The syntax is:
	
	-fragment_size <bytes>


Specify the minimal buffering fragment in pulseaudio, it will affect the
audio latency. By default it is unset.


=head2 sndio


sndio input device.

To enable this input device during configuration you need libsndio
installed on your system.

The filename to provide to the input device is the device node
representing the sndio input device, and is usually set to
F</dev/audio0>.

For example to grab from F</dev/audio0> using B<avconv> use the
command:
	
	avconv -f sndio -i /dev/audio0 /tmp/oss.wav



=head2 video4linux2


Video4Linux2 input video device.

The name of the device to grab is a file device node, usually Linux
systems tend to automatically create such nodes when the device
(e.g. an USB webcam) is plugged into the system, and has a name of the
kind F</dev/videoI<N>>, where I<N> is a number associated to
the device.

Video4Linux2 devices usually support a limited set of
I<width>xI<height> sizes and framerates. You can check which are
supported using B<-list_formats all> for Video4Linux2 devices.

Some usage examples of the video4linux2 devices with avconv and avplay:

	
	# Grab and show the input of a video4linux2 device.
	avplay -f video4linux2 -framerate 30 -video_size hd720 /dev/video0
	
	# Grab and record the input of a video4linux2 device, leave the
	framerate and size as previously set.
	avconv -f video4linux2 -input_format mjpeg -i /dev/video0 out.mpeg



=head2 vfwcap


VfW (Video for Windows) capture input device.

The filename passed as input is the capture driver number, ranging from
0 to 9. You may use "list" as filename to print a list of drivers. Any
other filename will be interpreted as device number 0.


=head2 x11grab


X11 video input device.

This device allows to capture a region of an X11 display.

The filename passed as input has the syntax:
	
	[<hostname>]:<display_number>.<screen_number>[+<x_offset>,<y_offset>]


I<hostname>:I<display_number>.I<screen_number> specifies the
X11 display name of the screen to grab from. I<hostname> can be
omitted, and defaults to "localhost". The environment variable
B<DISPLAY> contains the default display name.

I<x_offset> and I<y_offset> specify the offsets of the grabbed
area with respect to the top-left border of the X11 screen. They
default to 0.

Check the X11 documentation (e.g. man X) for more detailed information.

Use the F<dpyinfo> program for getting basic information about the
properties of your X11 display (e.g. grep for "name" or "dimensions").

For example to grab from F<:0.0> using B<avconv>:
	
	avconv -f x11grab -r 25 -s cif -i :0.0 out.mpg
	
	# Grab at position 10,20.
	avconv -f x11grab -r 25 -s cif -i :0.0+10,20 out.mpg



=head3 I<follow_mouse> AVOption


The syntax is:
	
	-follow_mouse centered|<PIXELS>


When it is specified with "centered", the grabbing region follows the mouse
pointer and keeps the pointer at the center of region; otherwise, the region
follows only when the mouse pointer reaches within I<PIXELS> (greater than
zero) to the edge of region.

For example:
	
	avconv -f x11grab -follow_mouse centered -r 25 -s cif -i :0.0 out.mpg
	
	# Follows only when the mouse pointer reaches within 100 pixels to edge
	avconv -f x11grab -follow_mouse 100 -r 25 -s cif -i :0.0 out.mpg



=head3 I<show_region> AVOption


The syntax is:
	
	-show_region 1


If I<show_region> AVOption is specified with I<1>, then the grabbing
region will be indicated on screen. With this option, it's easy to know what is
being grabbed if only a portion of the screen is grabbed.

For example:
	
	avconv -f x11grab -show_region 1 -r 25 -s cif -i :0.0+10,20 out.mpg
	
	# With follow_mouse
	avconv -f x11grab -follow_mouse centered -show_region 1  -r 25 -s cif -i :0.0 out.mpg



=encoding utf8
=head1 SEE ALSO

avconv(1), avplay(1) and the Libav HTML documentation

=encoding utf8
=head1 AUTHORS

The Libav developers

